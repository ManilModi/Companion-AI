@model List<DotnetMVCApp.ViewModels.Candidate.JobSearchViewModel>
@{
    Layout = "~/Views/Shared/_CandidateLayout.cshtml";
}

<div class="text-white">
    <h1 class="text-3xl font-bold mb-6">Find Your Dream Job</h1>

    <!-- 🔎 Search + Filters -->
    <form method="get" asp-action="JobSearch" class="flex flex-wrap items-center mb-6 gap-3">
        <div class="flex-1">
            <input type="text" name="query" value="@Context.Request.Query["query"]"
                   placeholder="Search jobs, companies, or keywords..."
                   class="w-full px-4 py-2 rounded-xl bg-gray-800 text-white border border-gray-700
                      focus:outline-none focus:border-indigo-400" />
        </div>

        <div>
            <select name="sortBy"
                    class="px-3 py-2 rounded-xl bg-gray-800 text-white border border-gray-700 focus:outline-none focus:border-indigo-400">
                <option value="similarity" selected="@(Context.Request.Query["sortBy"] == "similarity")">Most Relevant</option>
                <option value="recent" selected="@(Context.Request.Query["sortBy"] == "recent")">Recently Posted</option>
                <option value="applicants" selected="@(Context.Request.Query["sortBy"] == "applicants")">Most Applicants</option>
            </select>
        </div>

        <div>
            <select name="status"
                    class="px-3 py-2 rounded-xl bg-gray-800 text-white border border-gray-700 focus:outline-none focus:border-indigo-400">
                <option value="" selected="@(string.IsNullOrEmpty(Context.Request.Query["status"]))">All Jobs</option>
                <option value="active" selected="@(Context.Request.Query["status"] == "active")">Active</option>
                <option value="closed" selected="@(Context.Request.Query["status"] == "closed")">Closed</option>
            </select>
        </div>

        <div>
            <button type="submit"
                    class="px-4 py-2 rounded-xl bg-gradient-to-r from-indigo-300 to-purple-400 text-gray-900
                       font-medium shadow-md hover:shadow-lg transition duration-200">
                Filter
            </button>
        </div>
    </form>

    <!-- Showing jobs info -->
    <p class="text-gray-400 mb-4">
        Showing @Model.Count jobs
        @if (!string.IsNullOrEmpty(Context.Request.Query["query"]))
        {
            <span>for "<strong>@Context.Request.Query["query"]</strong>"</span>
        }
        (sorted by
        @(
                Context.Request.Query["sortBy"].ToString() switch
                {
                    "recent" => "Recently Posted",
                    "applicants" => "Most Applicants",
                    _ => "Relevance"
                }
                ))

    </p>

    <div class="space-y-4">
        @foreach (var job in Model)
        {
            <div class="bg-gray-800 rounded-2xl p-6 shadow-md hover:shadow-xl transition">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                    <!-- Job Info -->
                    <div>
                        <h2 class="text-xl font-semibold flex items-center">
                            @job.JobTitle
                            @if (job.Similarity >= 0.75f)
                            {
                                <span class="ml-2 px-2 py-1 bg-green-700 text-xs rounded-lg">Top Match</span>
                            }
                            else if (job.Similarity >= 0.5f)
                            {
                                <span class="ml-2 px-2 py-1 bg-yellow-600 text-xs rounded-lg">Good Match</span>
                            }
                            else
                            {
                                <span class="ml-2 px-2 py-1 bg-gray-600 text-xs rounded-lg">Low Match</span>
                            }
                        </h2>
                        <p class="text-gray-400">@job.Company</p>
                        <div class="flex flex-wrap items-center text-sm text-gray-500 space-x-4 mt-2">
                            <span>@job.Location</span>
                            <span>@job.JobType</span>
                            <span>@job.SalaryRange</span>
                        </div>

                        <p class="text-sm text-gray-500 mt-2">@job.ApplicantsCount applicants</p>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex space-x-3 mt-4 md:mt-0 items-center">
                        <span class="px-3 py-1 text-sm rounded-full @(job.Status == "active" ? "bg-green-600 text-white" : "bg-red-600 text-white")">
                            @job.Status
                        </span>

                        <button type="button"
                                id="toggleBtn-@job.JobId"
                                class="px-4 py-2 rounded-xl bg-gray-700 text-gray-200 border border-gray-600 hover:border-gray-400 hover:text-white transition"
                                onclick="toggleJobCard(@job.JobId)">
                            View Details
                        </button>

                        @if (job.Status == "active")
                        {
                            <!-- Active Job Buttons -->
                            <!-- Mock Interview -->
                            @if (job.HasApplied)
                            {
                                <a href="@Url.Action("MockInterview", "Candidate", new { id = job.JobId })"
                                   class="px-4 py-2 rounded-xl bg-gradient-to-r from-purple-400 to-pink-500 text-white font-medium shadow-md hover:shadow-lg transition duration-200">
                                    Mock Interview
                                </a>
                            }
                            else
                            {
                                <button type="button"
                                        onclick="openMockInterviewAlert()"
                                        class="px-4 py-2 rounded-xl bg-gradient-to-r from-purple-400 to-pink-500 text-white font-medium shadow-md hover:shadow-lg transition duration-200">
                                    Mock Interview
                                </button>
                            }

                            @if (job.HasApplied)
                            {
                                <button type="button"
                                        onclick="openWithdrawModal(@job.JobId)"
                                        class="px-4 py-2 rounded-xl bg-red-600 text-white font-medium hover:bg-red-700 transition">
                                    Withdraw Application
                                </button>

                                <button type="button"
                                        onclick="fetchSuggestions(@job.JobId)"
                                        class="px-4 py-2 rounded-xl bg-indigo-500 text-white font-medium shadow-md hover:bg-indigo-600 transition">
                                    Suggestions
                                </button>

                                <input type="hidden" id="resumeJson-@job.JobId" value='@Html.Raw(job.CandidateResumeJson ?? "{}")' />
                                <input type="hidden" id="jobDesc-@job.JobId" value="@job.Description" />
                            }
                            else
                            {
                                <a href="@Url.Action("ApplyJob", "Candidate", new { id = job.JobId })"
                                   class="px-4 py-2 rounded-xl bg-gradient-to-r from-blue-400 to-cyan-400 text-white font-medium shadow-md hover:shadow-lg transition duration-200">
                                    Apply Now
                                </a>
                            }
                        }
                        else
                        {
                            <!-- Closed Job Buttons -->
                            <button type="button"
                                    onclick="fetchSuggestions(@job.JobId)"
                                    class="px-4 py-2 rounded-xl bg-indigo-500 text-white font-medium shadow-md hover:bg-indigo-600 transition">
                                Suggestions
                            </button>
                        }

                        <!-- Feedback button (always shown) -->
                        <a href="@Url.Action("JobFeedbacksCandidate", "Feedback", new { jobId = job.JobId })"
                           class="px-4 py-2 rounded-xl bg-yellow-500 text-white font-medium shadow-md hover:bg-yellow-600 transition">
                            Feedback
                        </a>
                    </div>
                </div>

                <!-- Hidden details section -->
                <div id="jobCard-@job.JobId" class="mt-4 hidden">
                    <div class="bg-gray-700 rounded-xl p-6">
                        <h4 class="text-lg font-semibold mb-3">Job Details</h4>
                        <div class="grid grid-cols-2 gap-4 text-sm text-gray-300 mb-4">
                            <p><strong>Company:</strong> @job.Company</p>
                            <p><strong>Location:</strong> @job.Location</p>
                            <p><strong>Job Type:</strong> @job.JobType</p>
                            <p><strong>Salary Range:</strong> @job.SalaryRange</p>
                            <p><strong>Open Time:</strong> @job.OpenTime.ToString("g")</p>
                            <p><strong>Close Time:</strong> @job.CloseTime.ToString("g")</p>
                        </div>

                        <p class="text-gray-200 text-sm mb-2"><strong>Description:</strong></p>
                        <p class="text-gray-400 text-sm mb-4">@job.Description</p>

                        @if (!string.IsNullOrWhiteSpace(job.TechStacks))
                        {
                            <p class="text-gray-200 text-sm mb-2"><strong>Tech Stacks:</strong></p>
                            <div class="flex flex-wrap gap-2 mb-4">
                                @foreach (var stack in job.TechStacks.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <span class="px-3 py-1 bg-indigo-600 text-white text-xs font-medium rounded-full shadow-sm">
                                        @stack.Trim()
                                    </span>
                                }
                            </div>
                        }

                        @if (!string.IsNullOrWhiteSpace(job.SkillsRequired))
                        {
                            <p class="text-gray-200 text-sm mb-2"><strong>Skills Required:</strong></p>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var skill in job.SkillsRequired.Trim('[', ']').Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <span class="px-3 py-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white text-xs font-medium rounded-full shadow-md">
                                        @skill.Trim(' ', '"')
                                    </span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Withdraw Modal -->
<div id="withdrawModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white rounded-2xl shadow-xl w-full max-w-md p-6">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Confirm Withdrawal</h3>
        <p class="text-gray-600 mb-6">Are you sure you want to withdraw your application? This action cannot be undone.</p>
        <form id="withdrawForm" method="post" asp-action="WithdrawJob" asp-controller="Candidate">
            <input type="hidden" id="withdrawJobId" name="id" />
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeWithdrawModal()" class="px-4 py-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition">Cancel</button>
                <button type="submit" class="px-4 py-2 rounded-lg bg-red-600 text-white font-medium hover:bg-red-700 transition">Yes, Withdraw</button>
            </div>
        </form>
    </div>
</div>

<!-- Suggestions Modal -->
<div id="suggestionsModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-gray-900 text-gray-100 rounded-2xl shadow-xl w-full max-w-3xl p-6 relative">
        <div class="flex justify-between items-center border-b border-gray-700 pb-3 mb-4">
            <h3 class="text-2xl font-bold text-white">Application Suggestions</h3>
            <button onclick="closeSuggestionsModal()" class="text-gray-400 hover:text-gray-200 transition">✕</button>
        </div>
        <div id="suggestionsContent" class="space-y-6 max-h-[60vh] overflow-y-auto pr-2 custom-scrollbar">
            <p>Loading suggestions...</p>
        </div>
        <div class="flex justify-end mt-6 border-t border-gray-700 pt-4">
            <button type="button" onclick="closeSuggestionsModal()"
                    class="px-4 py-2 rounded-lg bg-gray-700 text-gray-200 font-medium hover:bg-gray-600 transition">
                Close
            </button>
        </div>
    </div>
</div>

<!-- Mock Interview Alert Modal -->
<div id="mockInterviewAlertModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white rounded-2xl shadow-xl w-full max-w-md p-6">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Action Required</h3>
        <p class="text-gray-600 mb-6">To take the Mock Interview, you must first apply for this job.</p>
        <div class="flex justify-end space-x-3">
            <button type="button" onclick="closeMockInterviewAlert()"
                    class="px-4 py-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition">
                Close
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleJobCard(jobId) {
            const card = document.getElementById(`jobCard-${jobId}`);
            const btn = document.getElementById(`toggleBtn-${jobId}`);
            if (!card || !btn) return;

            const visible = card.style.display === 'block';
            if (visible) {
                card.style.display = 'none';
                btn.innerText = 'View Details';
                return;
            }

            document.querySelectorAll('[id^="jobCard-"]').forEach(el => el.style.display = 'none');
            document.querySelectorAll('[id^="toggleBtn-"]').forEach(el => el.innerText = 'View Details');

            card.style.display = 'block';
            btn.innerText = 'Hide Details';
            card.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        function openWithdrawModal(jobId) {
            document.getElementById("withdrawModal").classList.remove("hidden");
            document.getElementById("withdrawJobId").value = jobId;
        }

        function closeWithdrawModal() {
            document.getElementById("withdrawModal").classList.add("hidden");
        }

        function openMockInterviewAlert() {
            document.getElementById("mockInterviewAlertModal").classList.remove("hidden");
        }

        function closeMockInterviewAlert() {
            document.getElementById("mockInterviewAlertModal").classList.add("hidden");
        }

        async function fetchSuggestions(jobId) {
            const resumeJson = JSON.parse(document.getElementById(`resumeJson-${jobId}`)?.value || "{}");
            const jobDesc = document.getElementById(`jobDesc-${jobId}`)?.value || "";

            const requestData = { resume_json: resumeJson, job_description: jobDesc };

            try {
                const response = await fetch("http://127.0.0.1:8000/score-resume/", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) throw new Error("Failed to fetch suggestions");
                const data = await response.json();

                document.getElementById("suggestionsContent").innerHTML = `
                    <div class="space-y-6">
                        <div>
                            <h4 class="text-lg font-semibold text-green-500">Strengths</h4>
                            <p class="text-gray-300 mt-2">${data.raw_output?.strengths_summary || "No strengths found."}</p>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold text-yellow-500">Areas to Improve</h4>
                            <ul class="list-disc ml-6 text-gray-300 mt-2">
                                ${(data.raw_output?.improvement_areas || []).map(i => `<li>${i}</li>`).join("")}
                            </ul>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold text-blue-500">Suggestions</h4>
                            <ul class="list-disc ml-6 text-gray-300 mt-2">
                                ${(data.raw_output?.suggestions || []).map(s => `<li>${s}</li>`).join("")}
                            </ul>
                        </div>
                    </div>
                `;
            } catch (err) {
                console.error(err);
                document.getElementById("suggestionsContent").innerHTML =
                    "<p class='text-red-600'>Error fetching suggestions. Please try again later.</p>";
            }

            document.getElementById("suggestionsModal").classList.remove("hidden");
        }

        function closeSuggestionsModal() {
            document.getElementById("suggestionsModal").classList.add("hidden");
        }
    </script>
}
